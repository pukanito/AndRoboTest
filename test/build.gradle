apply plugin: 'android'

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.3"

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:19.+'
    compile 'com.google.android.gms:play-services:4.3.23'
}

sourceSets {
    unitTest {
        java.srcDir file('src/test/java')
        resources.srcDir file('src/test/resources')
    }
}

configurations {
    unitTestCompile.extendsFrom runtime
    unitTestRuntime.extendsFrom unitTestCompile
}

dependencies {
    unitTestCompile files("$project.buildDir/classes/release")
    unitTestCompile files("${project(':GooglePlayServices').buildDir}/classes/release")
}

task unitTest(type:Test, dependsOn: assemble) {
    description = "run unit tests"
//    testClassesDir = project.sourceSets.unitTest.output.classesDir
//    classpath = project.sourceSets.unitTest.runtimeClasspath

    // Following lines from: https://coderwall.com/p/ybds4w (adapted to unitTest)
    testClassesDir = sourceSets.unitTest.output.classesDir

    android.sourceSets.main.java.srcDirs.each { dir ->
        def buildDir = dir.getAbsolutePath().split('/')
        buildDir =  (buildDir[0..(buildDir.length - 4)] + ['build', 'classes', 'debug']).join('/')

        sourceSets.unitTest.compileClasspath += files(buildDir)
        sourceSets.unitTest.runtimeClasspath += files(buildDir)
    }

    classpath = sourceSets.unitTest.runtimeClasspath
}

check.dependsOn unitTest

dependencies {
    unitTestCompile 'junit:junit:4.+'
    unitTestCompile fileTree(dir: 'libs', include: ['*.jar'])
    unitTestCompile 'com.android.support:appcompat-v7:19.+'
    unitTestCompile project(':GooglePlayServices')
//    unitTestCompile 'com.google.android.gms:play-services:4.3.23'
    unitTestCompile 'com.google.android:android:4.1.1.4'
    unitTestCompile 'org.robolectric:robolectric:2.2'
}

task addTest {
    def src = ['src/test/java']
    def file = file("test.iml")

    doLast {
        try {
            def parsedXml = (new XmlParser()).parse(file)
            def node = parsedXml.component[1].content[0]
            src.each {
                def path = 'file://$MODULE_DIR$/' + "${it}"
                def set = node.find { it.@url == path }
                if (set == null) {
                    new Node(node, 'sourceFolder', ['url': 'file://$MODULE_DIR$/' + "${it}", 'isTestSource': "true"])
                    def writer = new StringWriter()
                    new XmlNodePrinter(new PrintWriter(writer)).print(parsedXml)
                    file.text = writer.toString()
                }
            }
        } catch (FileNotFoundException e) {
            // nop, iml not found
        }
    }
}

// always do the addtest on prebuild
gradle.projectsEvaluated {
    preBuild.dependsOn(addTest)
}

